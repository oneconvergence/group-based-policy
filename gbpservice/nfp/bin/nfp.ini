[ORCHESTRATOR]
# Number of worker process to be spawned.
workers=1
# Path to NFP modules in . format
# NFP core framework will load all .py files
# from this path as nfp modules
nfp_modules_path=gbpservice.nfp.orchestrator.modules
# To invoke OTC Apis
# It could be rpc/REST.
# rpc -  where fip access unavaiable for OTC NFP controller
# REST - where fip access is available for OTC NFP controller
backend=rpc

[PROXY_AGENT]
# Number of worker process to be spawned.
workers=1
# Path to NFP modules in . format
# NFP core framework will load all .py files
# from this path as nfp modules
nfp_modules_path=gbpservice.nfp.proxy_agent.modules
# To invoke OTC Apis
# Proxy agent will always use unix_rest backend to
# communicate with proxy component inside namespace
backend=unix_rest

[PROXY]
thread_pool_size= 10
unix_bind_path= /var/run/uds_socket
max_connections=10
nfp_controller_ip_address= 11.0.0.3
worker_threads=100
connect_max_wait_timeout=120
idle_max_wait_timeout=120
idle_min_wait_timeout=0.1
#pecan controller ip address and port
rest_server_address=120.0.0.3
rest_server_port=8070

[CONFIG_ORCHESTRATOR]
# Number of worker process to be spawned.
workers=1
# Path to NFP modules in . format
# NFP core framework will load all .py files
# from this path as nfp modules
nfp_modules_path=gbpservice.nfp.proxy_agent.modules
# To invoke OTC Apis
# Proxy agent will always use unix_rest backend to
# communicate with proxy component inside namespace
backend=rpc

# Section describing params for backend=rpc
[RPC]
# Topic to send OTC request rpc on.
topic=nfp-proxy-agent-topic
